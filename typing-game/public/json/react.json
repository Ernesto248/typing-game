[
  {
    "id": 1,
    "codeString": "const Counter = () => {\n  const [count, setCount] = React.useState(0);\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}",
    "language": "Javascript",
    "description": "A simple counter component using useState."
  },
  {
    "id": 2,
    "codeString": "const Effect = () => {\n  React.useEffect(() => {\n    console.log('Component mounted');\n    return () => console.log('Component unmounted');\n  }, []);\n  return <p>Component with useEffect</p>;\n}",
    "language": "Javascript",
    "description": "A React component using useEffect for side effects."
  },
  {
    "id": 3,
    "codeString": "const Greeting = ({ name }) => <p>Hello, {name}!</p>;",
    "language": "Javascript",
    "description": "A simple component displaying a greeting."
  },
  {
    "id": 4,
    "codeString": "const Input = () => {\n  const [text, setText] = React.useState('');\n  return (\n    <div>\n      <input type=\"text\" value={text} onChange={(e) => setText(e.target.value)} />\n      <p>You typed: {text}</p>\n    </div>\n  );\n}",
    "language": "Javascript",
    "description": "A component handling input changes."
  },
  {
    "id": 5,
    "codeString": "const List = () => {\n  const items = ['Apple', 'Banana', 'Cherry'];\n  return <ul>{items.map((item, index) => <li key={index}>{item}</li>)}</ul>;\n}",
    "language": "Javascript",
    "description": "A list rendering component."
  },
  {
    "id": 6,
    "codeString": "const Toggle = () => {\n  const [isOn, setIsOn] = React.useState(false);\n  return <button onClick={() => setIsOn(!isOn)}>{isOn ? 'ON' : 'OFF'}</button>;\n}",
    "language": "Javascript",
    "description": "A toggle button component."
  },
  {
    "id": 7,
    "codeString": "const Clock = () => {\n  const [time, setTime] = React.useState(new Date().toLocaleTimeString());\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setTime(new Date().toLocaleTimeString());\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  return <p>{time}</p>;\n}",
    "language": "Javascript",
    "description": "A live updating clock."
  },
  {
    "id": 8,
    "codeString": "const FetchData = () => {\n  const [data, setData] = React.useState(null);\n  React.useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/todos/1')\n      .then(response => response.json())\n      .then(json => setData(json));\n  }, []);\n  return <pre>{JSON.stringify(data, null, 2)}</pre>;\n}",
    "language": "Javascript",
    "description": "Fetching data from an API."
  },
  {
    "id": 9,
    "codeString": "const ThemeSwitcher = () => {\n  const [darkMode, setDarkMode] = React.useState(false);\n  return (\n    <div style={{ background: darkMode ? 'black' : 'white', color: darkMode ? 'white' : 'black' }}>\n      <button onClick={() => setDarkMode(!darkMode)}>Switch Theme</button>\n    </div>\n  );\n}",
    "language": "Javascript",
    "description": "A component that toggles between dark and light mode."
  },
  {
    "id": 10,
    "codeString": "const Hover = () => {\n  const [hover, setHover] = React.useState(false);\n  return (\n    <div onMouseEnter={() => setHover(true)} onMouseLeave={() => setHover(false)}>\n      {hover ? 'Hovering!' : 'Hover over me'}\n    </div>\n  );\n}",
    "language": "Javascript",
    "description": "A hover event handler."
  },
  {
    "id": 11,
    "codeString": "const Form = () => {\n  const [formData, setFormData] = React.useState({ name: '', email: '' });\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(formData);\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        value={formData.name}\n        onChange={e => setFormData({...formData, name: e.target.value})}\n      />\n      <input\n        value={formData.email}\n        onChange={e => setFormData({...formData, email: e.target.value})}\n      />\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}",
    "language": "Javascript",
    "description": "A form handling component with multiple inputs."
  },
  {
    "id": 12,
    "codeString": "const Modal = ({ isOpen, onClose, children }) => {\n  if (!isOpen) return null;\n  return (\n    <div style={{\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      background: 'rgba(0,0,0,0.5)'\n    }}>\n      <div style={{ background: 'white', padding: '20px' }}>\n        {children}\n        <button onClick={onClose}>Close</button>\n      </div>\n    </div>\n  );\n}",
    "language": "Javascript",
    "description": "A reusable modal component."
  },
  {
    "id": 13,
    "codeString": "const Reducer = () => {\n  const [state, dispatch] = React.useReducer((state, action) => {\n    switch (action.type) {\n      case 'INCREMENT': return { count: state.count + 1 };\n      case 'DECREMENT': return { count: state.count - 1 };\n      default: return state;\n    }\n  }, { count: 0 });\n  return (\n    <div>\n      <p>Count: {state.count}</p>\n      <button onClick={() => dispatch({ type: 'INCREMENT' })}>+</button>\n      <button onClick={() => dispatch({ type: 'DECREMENT' })}>-</button>\n    </div>\n  );\n}",
    "language": "Javascript",
    "description": "Using useReducer for state management."
  },
  {
    "id": 14,
    "codeString": "const Memo = () => {\n  const [count, setCount] = React.useState(0);\n  const expensiveCalculation = React.useMemo(() => {\n    return count * count * count;\n  }, [count]);\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <p>Cube: {expensiveCalculation}</p>\n      <button onClick={() => setCount(c => c + 1)}>Increment</button>\n    </div>\n  );\n}",
    "language": "Javascript",
    "description": "Using useMemo for performance optimization."
  },
  {
    "id": 15,
    "codeString": "const ErrorBoundary = class extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>;\n    }\n    return this.props.children;\n  }\n}",
    "language": "Javascript",
    "description": "An error boundary component for handling errors."
  }
]
